#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <signal.h>
#include <unistd.h>

// Block SIGINT 
void handle_sigint(int sig) {
    printf("\nSIGINT (Ctrl+C) detected. Program will not terminate.\n");
}

// Sum of first N primes
void sumOfPrimesFunc(int N) {
    int count = 0, num = 2, sum = 0;

    while (count < N) {
        bool isPrime = true;
        for (int i = 2; i * i <= num; i++) {
            if (num % i == 0) {
                isPrime = false;
                break;
            }
        }
        if (isPrime) {
            sum += num;
            count++;
        }
        num++;
    }

    printf("Function A: Sum of first %d primes = %d\n", N, sum);
}

void runEvery2Seconds() {
    time_t start = time(NULL);
    while (time(NULL) - start < 5) {
        printf("Function B: Thread 1 running\n");
        sleep(2);
    }
}

void runEvery3Seconds() {
    time_t start = time(NULL);
    while (time(NULL) - start < 5) {
        printf("Function C: Thread 2 running\n");
        sleep(3);
    }
}

int main() {
    signal(SIGINT, handle_sigint);  

    int N;
    clock_t start, end;
    double cpu_time_used;

    printf("Enter N (for sum of first N primes): ");
    scanf("%d", &N);

    printf("\n--- Running sumOfPrimesFunc ---\n");
    start = clock();
    sumOfPrimesFunc(N);
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Time taken: %.2f seconds\n", cpu_time_used);

    printf("\n--- Running runEvery2Seconds (5 sec) ---\n");
    start = clock();
    runEvery2Seconds();
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Time taken: %.2f seconds\n", cpu_time_used);

    printf("\n--- Running runEvery3Seconds (5 sec) ---\n");
    start = clock();
    runEvery3Seconds();
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Time taken: %.2f seconds\n", cpu_time_used);

    return 0;
}
